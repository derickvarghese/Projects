import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import datetime
import yfinance as yf

plt.style.use('fivethirtyeight')

stock = 'AAPL'
num_days = 1000
start_date = (datetime.datetime.now() - datetime.timedelta(days=num_days)).strftime("%Y-%m-%d")
end_date = datetime.datetime.now().strftime("%Y-%m-%d")
df = yf.Ticker(stock).history(start=start_date, end=end_date)
df.info()

plt.figure(figsize=(15, 8))
plt.plot(df.Close, linewidth=1, label=stock)
plt.xlabel('Time')
plt.ylabel('Price ($)')
plt.title(f'Closing price for {stock}')
plt.legend()
plt.show()

data = pd.DataFrame()
data['Close'] = df.Close

def MACD(data, fast, slow, signal):
    macd = data['Close'].ewm(span=fast).mean() - data['Close'].ewm(span=slow).mean()
    signal = macd.ewm(span=signal).mean()

    return macd, signal

def signals(data):
    buy_price = []
    sell_price = []
    open_position = []
    funds = [100000] * len(data)
    flag = 0
    macd, signal = MACD(data, 12, 26, 9)
    for i in range(len(data)):
        if macd[i] - signal[i] > 0:
            if flag == 0 or flag == -1:
                flag = 1
                buy_price.append(data['Close'][i])
                sell_price.append(np.nan)
                last_pos = funds[i-1]/data['Close'][i]
                funds[i] = funds[i-1]
                open_position.append(last_pos)
            else:
                buy_price.append(np.nan)
                sell_price.append(np.nan)
                funds[i] = (1 + (data['Close'][i]/data['Close'][i-1] - 1)) * funds[i-1]
                open_position.append(last_pos)
        elif macd[i] - signal[i] < 0:
            if flag == 0 or flag == 1:
                flag = -1
                buy_price.append(np.nan)
                sell_price.append(data['Close'][i])
                last_pos = funds[i-1]/data['Close'][i]
                funds[i] = funds[i-1]
                open_position.append(-last_pos)
            else:
                buy_price.append(np.nan)
                sell_price.append(np.nan)
                funds[i] = (1 + (1 - data['Close'][i]/data['Close'][i-1])) * funds[i-1]
                open_position.append(-last_pos)
        else:
            buy_price.append(np.nan)
            sell_price.append(np.nan)
            open_position.append(0)

    return buy_price, sell_price, open_position, funds, macd, signal

buy_sell = signals(data)
data['Buy price'] = buy_sell[0]
data['Sell price'] = buy_sell[1]
data['Open position'] = buy_sell[2]
data['Live position'] = data['Close'].multiply(data['Open position'])
data['Funds'] = buy_sell[3]
data['MACD'] = buy_sell[4]
data['Signal'] = buy_sell[5]

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 8), sharex=True)

ax1.plot(data['Close'], label=stock, linewidth=1, color='black')
ax1.scatter(data.index, data['Buy price'], label='Buy', marker='^', color='green', s=70)
ax1.scatter(data.index, data['Sell price'], label='Sell', marker='v', color='red', s=70)
ax1.set_ylabel('Close price ($)')
ax1.legend(loc='lower right')

ax2.plot(data['MACD'], label='MACD', linewidth=0.8, color='green')
ax2.plot(data['Signal'], label='Signal', linewidth=0.8, color='red')
ax2.set_ylabel('MACD')
ax2.axhline(0, color='black', linewidth=1.0)
ax2.legend(loc='lower right')

fig.suptitle(f'{stock} Buy-Sell Signals')
plt.xlabel('Time')
plt.show()

plt.figure(figsize = (15, 8))
plt.plot(data['Funds'], linewidth = 1.0)
plt.axhline(y=data['Funds'][0], color='black', linewidth=1.0)
plt.title('PnL')
plt.xlabel('Time')
plt.show()
